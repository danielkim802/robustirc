// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

package proto

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RobustMessage_RobustType int32

const (
	RobustMessage_CREATE_SESSION   RobustMessage_RobustType = 0
	RobustMessage_DELETE_SESSION   RobustMessage_RobustType = 1
	RobustMessage_IRC_FROM_CLIENT  RobustMessage_RobustType = 2
	RobustMessage_IRC_TO_CLIENT    RobustMessage_RobustType = 3
	RobustMessage_PING             RobustMessage_RobustType = 4
	RobustMessage_MESSAGE_OF_DEATH RobustMessage_RobustType = 5
	RobustMessage_CONFIG           RobustMessage_RobustType = 6
	RobustMessage_STATE            RobustMessage_RobustType = 7
	RobustMessage_ANY              RobustMessage_RobustType = 8
)

var RobustMessage_RobustType_name = map[int32]string{
	0: "CREATE_SESSION",
	1: "DELETE_SESSION",
	2: "IRC_FROM_CLIENT",
	3: "IRC_TO_CLIENT",
	4: "PING",
	5: "MESSAGE_OF_DEATH",
	6: "CONFIG",
	7: "STATE",
	8: "ANY",
}

var RobustMessage_RobustType_value = map[string]int32{
	"CREATE_SESSION":   0,
	"DELETE_SESSION":   1,
	"IRC_FROM_CLIENT":  2,
	"IRC_TO_CLIENT":    3,
	"PING":             4,
	"MESSAGE_OF_DEATH": 5,
	"CONFIG":           6,
	"STATE":            7,
	"ANY":              8,
}

func (x RobustMessage_RobustType) String() string {
	return proto.EnumName(RobustMessage_RobustType_name, int32(x))
}

func (RobustMessage_RobustType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{1, 0}
}

type RaftLog_LogType int32

const (
	RaftLog_COMMAND    RaftLog_LogType = 0
	RaftLog_NOOP       RaftLog_LogType = 1
	RaftLog_ADDPEER    RaftLog_LogType = 2
	RaftLog_REMOVEPEER RaftLog_LogType = 3
	RaftLog_BARRIER    RaftLog_LogType = 4
)

var RaftLog_LogType_name = map[int32]string{
	0: "COMMAND",
	1: "NOOP",
	2: "ADDPEER",
	3: "REMOVEPEER",
	4: "BARRIER",
}

var RaftLog_LogType_value = map[string]int32{
	"COMMAND":    0,
	"NOOP":       1,
	"ADDPEER":    2,
	"REMOVEPEER": 3,
	"BARRIER":    4,
}

func (x RaftLog_LogType) String() string {
	return proto.EnumName(RaftLog_LogType_name, int32(x))
}

func (RaftLog_LogType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{2, 0}
}

type RobustId struct {
	Id                   uint64   `protobuf:"fixed64,1,opt,name=id,proto3" json:"id,omitempty"`
	Reply                uint64   `protobuf:"fixed64,2,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RobustId) Reset()         { *m = RobustId{} }
func (m *RobustId) String() string { return proto.CompactTextString(m) }
func (*RobustId) ProtoMessage()    {}
func (*RobustId) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}
func (m *RobustId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RobustId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RobustId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RobustId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobustId.Merge(m, src)
}
func (m *RobustId) XXX_Size() int {
	return m.Size()
}
func (m *RobustId) XXX_DiscardUnknown() {
	xxx_messageInfo_RobustId.DiscardUnknown(m)
}

var xxx_messageInfo_RobustId proto.InternalMessageInfo

func (m *RobustId) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RobustId) GetReply() uint64 {
	if m != nil {
		return m.Reply
	}
	return 0
}

type RobustMessage struct {
	Id      *RobustId                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Session *RobustId                `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	Type    RobustMessage_RobustType `protobuf:"varint,3,opt,name=type,proto3,enum=proto.RobustMessage_RobustType" json:"type,omitempty"`
	Data    string                   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// TODO: use oneof for the following to save space?
	UnixNano             int64    `protobuf:"varint,5,opt,name=unix_nano,json=unixNano,proto3" json:"unix_nano,omitempty"`
	Servers              []string `protobuf:"bytes,6,rep,name=servers,proto3" json:"servers,omitempty"`
	CurrentMaster        string   `protobuf:"bytes,7,opt,name=current_master,json=currentMaster,proto3" json:"current_master,omitempty"`
	ClientMessageId      uint64   `protobuf:"varint,8,opt,name=client_message_id,json=clientMessageId,proto3" json:"client_message_id,omitempty"`
	Revision             uint64   `protobuf:"varint,9,opt,name=revision,proto3" json:"revision,omitempty"`
	RemoteAddr           string   `protobuf:"bytes,10,opt,name=remote_addr,json=remoteAddr,proto3" json:"remote_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RobustMessage) Reset()         { *m = RobustMessage{} }
func (m *RobustMessage) String() string { return proto.CompactTextString(m) }
func (*RobustMessage) ProtoMessage()    {}
func (*RobustMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{1}
}
func (m *RobustMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RobustMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RobustMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RobustMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobustMessage.Merge(m, src)
}
func (m *RobustMessage) XXX_Size() int {
	return m.Size()
}
func (m *RobustMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RobustMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RobustMessage proto.InternalMessageInfo

func (m *RobustMessage) GetId() *RobustId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RobustMessage) GetSession() *RobustId {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *RobustMessage) GetType() RobustMessage_RobustType {
	if m != nil {
		return m.Type
	}
	return RobustMessage_CREATE_SESSION
}

func (m *RobustMessage) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *RobustMessage) GetUnixNano() int64 {
	if m != nil {
		return m.UnixNano
	}
	return 0
}

func (m *RobustMessage) GetServers() []string {
	if m != nil {
		return m.Servers
	}
	return nil
}

func (m *RobustMessage) GetCurrentMaster() string {
	if m != nil {
		return m.CurrentMaster
	}
	return ""
}

func (m *RobustMessage) GetClientMessageId() uint64 {
	if m != nil {
		return m.ClientMessageId
	}
	return 0
}

func (m *RobustMessage) GetRevision() uint64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *RobustMessage) GetRemoteAddr() string {
	if m != nil {
		return m.RemoteAddr
	}
	return ""
}

type RaftLog struct {
	Index                uint64          `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Term                 uint64          `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	Type                 RaftLog_LogType `protobuf:"varint,3,opt,name=type,proto3,enum=proto.RaftLog_LogType" json:"type,omitempty"`
	Data                 []byte          `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Extensions           []byte          `protobuf:"bytes,5,opt,name=extensions,proto3" json:"extensions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RaftLog) Reset()         { *m = RaftLog{} }
func (m *RaftLog) String() string { return proto.CompactTextString(m) }
func (*RaftLog) ProtoMessage()    {}
func (*RaftLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{2}
}
func (m *RaftLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftLog.Merge(m, src)
}
func (m *RaftLog) XXX_Size() int {
	return m.Size()
}
func (m *RaftLog) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftLog.DiscardUnknown(m)
}

var xxx_messageInfo_RaftLog proto.InternalMessageInfo

func (m *RaftLog) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *RaftLog) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RaftLog) GetType() RaftLog_LogType {
	if m != nil {
		return m.Type
	}
	return RaftLog_COMMAND
}

func (m *RaftLog) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RaftLog) GetExtensions() []byte {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.RobustMessage_RobustType", RobustMessage_RobustType_name, RobustMessage_RobustType_value)
	proto.RegisterEnum("proto.RaftLog_LogType", RaftLog_LogType_name, RaftLog_LogType_value)
	proto.RegisterType((*RobustId)(nil), "proto.RobustId")
	proto.RegisterType((*RobustMessage)(nil), "proto.RobustMessage")
	proto.RegisterType((*RaftLog)(nil), "proto.RaftLog")
}

func init() { proto.RegisterFile("types.proto", fileDescriptor_d938547f84707355) }

var fileDescriptor_d938547f84707355 = []byte{
	// 552 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xd1, 0x6a, 0x9c, 0x40,
	0x14, 0x86, 0x33, 0xab, 0xbb, 0xba, 0x67, 0x93, 0xcd, 0xe4, 0x34, 0x14, 0x69, 0x61, 0x23, 0x0b,
	0x05, 0x9b, 0x8b, 0x50, 0x92, 0x27, 0x30, 0xbb, 0x93, 0xd4, 0xb2, 0x6a, 0x18, 0xa5, 0xd0, 0x2b,
	0x31, 0x71, 0x1a, 0x84, 0x44, 0x97, 0xd1, 0x84, 0xec, 0x2b, 0xf4, 0x09, 0x7a, 0xd1, 0x07, 0xea,
	0x65, 0xdf, 0xa0, 0x65, 0xfb, 0x22, 0xc5, 0xd1, 0x4d, 0x13, 0x68, 0xaf, 0x9c, 0xff, 0x9b, 0x33,
	0xff, 0x9c, 0xe3, 0x3f, 0x30, 0xaa, 0x57, 0x4b, 0x51, 0x1d, 0x2d, 0x65, 0x59, 0x97, 0xd8, 0x57,
	0x9f, 0xe9, 0x3b, 0x30, 0x79, 0x79, 0x79, 0x57, 0xd5, 0x5e, 0x86, 0x63, 0xe8, 0xe5, 0x99, 0x45,
	0x6c, 0xe2, 0x0c, 0x78, 0x2f, 0xcf, 0x70, 0x1f, 0xfa, 0x52, 0x2c, 0x6f, 0x56, 0x56, 0x4f, 0xa1,
	0x56, 0x4c, 0xbf, 0xe8, 0xb0, 0xd3, 0x1e, 0xf1, 0x45, 0x55, 0xa5, 0xd7, 0x02, 0x0f, 0x1e, 0xcf,
	0x8d, 0x8e, 0x77, 0x5b, 0xfb, 0xa3, 0x8d, 0xa9, 0x32, 0x7a, 0x0b, 0x46, 0x25, 0xaa, 0x2a, 0x2f,
	0x0b, 0x65, 0xf5, 0x8f, 0xaa, 0xcd, 0x3e, 0x9e, 0x80, 0xde, 0x74, 0x69, 0x69, 0x36, 0x71, 0xc6,
	0xc7, 0x07, 0xcf, 0xea, 0xba, 0xfb, 0x3a, 0x15, 0xaf, 0x96, 0x82, 0xab, 0x62, 0x44, 0xd0, 0xb3,
	0xb4, 0x4e, 0x2d, 0xdd, 0x26, 0xce, 0x90, 0xab, 0x35, 0xbe, 0x86, 0xe1, 0x5d, 0x91, 0x3f, 0x24,
	0x45, 0x5a, 0x94, 0x56, 0xdf, 0x26, 0x8e, 0xc6, 0xcd, 0x06, 0x04, 0x69, 0x51, 0xa2, 0xd5, 0x34,
	0x24, 0xef, 0x85, 0xac, 0xac, 0x81, 0xad, 0x39, 0x43, 0xbe, 0x91, 0xf8, 0x06, 0xc6, 0x57, 0x77,
	0x52, 0x8a, 0xa2, 0x4e, 0x6e, 0xd3, 0xaa, 0x16, 0xd2, 0x32, 0x94, 0xe9, 0x4e, 0x47, 0x7d, 0x05,
	0xf1, 0x10, 0xf6, 0xae, 0x6e, 0x72, 0x55, 0xd5, 0x36, 0x95, 0xe4, 0x99, 0x65, 0xda, 0xc4, 0xd1,
	0xf9, 0x6e, 0xbb, 0xd1, 0x35, 0xeb, 0x65, 0xf8, 0x0a, 0x4c, 0x29, 0xee, 0x73, 0x35, 0xfe, 0x50,
	0x95, 0x3c, 0x6a, 0x3c, 0x80, 0x91, 0x14, 0xb7, 0x65, 0x2d, 0x92, 0x34, 0xcb, 0xa4, 0x05, 0xea,
	0x2e, 0x68, 0x91, 0x9b, 0x65, 0x72, 0xfa, 0x8d, 0x00, 0xfc, 0x9d, 0x17, 0x11, 0xc6, 0x33, 0xce,
	0xdc, 0x98, 0x25, 0x11, 0x8b, 0x22, 0x2f, 0x0c, 0xe8, 0x56, 0xc3, 0xe6, 0x6c, 0xc1, 0x9e, 0x30,
	0x82, 0x2f, 0x60, 0xd7, 0xe3, 0xb3, 0xe4, 0x8c, 0x87, 0x7e, 0x32, 0x5b, 0x78, 0x2c, 0x88, 0x69,
	0x0f, 0xf7, 0x60, 0xa7, 0x81, 0x71, 0xb8, 0x41, 0x1a, 0x9a, 0xa0, 0x5f, 0x78, 0xc1, 0x39, 0xd5,
	0x71, 0x1f, 0xa8, 0xcf, 0xa2, 0xc8, 0x3d, 0x67, 0x49, 0x78, 0x96, 0xcc, 0x99, 0x1b, 0xbf, 0xa7,
	0x7d, 0x04, 0x18, 0xcc, 0xc2, 0xe0, 0xcc, 0x3b, 0xa7, 0x03, 0x1c, 0x42, 0x3f, 0x8a, 0xdd, 0x98,
	0x51, 0x03, 0x0d, 0xd0, 0xdc, 0xe0, 0x13, 0x35, 0xa7, 0x3f, 0x09, 0x18, 0x3c, 0xfd, 0x5c, 0x2f,
	0xca, 0xeb, 0xe6, 0xb9, 0xe4, 0x45, 0x26, 0x1e, 0xd4, 0x4b, 0xd0, 0x79, 0x2b, 0x9a, 0x6c, 0x6a,
	0x21, 0x6f, 0x55, 0xf0, 0x3a, 0x57, 0x6b, 0x3c, 0x7c, 0x16, 0xf2, 0xcb, 0x4d, 0xc8, 0xad, 0xcf,
	0xd1, 0xa2, 0xbc, 0xfe, 0x4f, 0xb6, 0xdb, 0x5d, 0xb6, 0x13, 0x00, 0xf1, 0x50, 0x8b, 0xa2, 0xf9,
	0x85, 0x95, 0x0a, 0x77, 0x9b, 0x3f, 0x21, 0xd3, 0x0f, 0x60, 0x74, 0x26, 0x38, 0x02, 0x63, 0x16,
	0xfa, 0xbe, 0x1b, 0xcc, 0xe9, 0x56, 0x33, 0x6d, 0x10, 0x86, 0x17, 0x94, 0x34, 0xd8, 0x9d, 0xcf,
	0x2f, 0x18, 0xe3, 0xb4, 0x87, 0x63, 0x00, 0xce, 0xfc, 0xf0, 0x23, 0x53, 0x5a, 0x6b, 0x36, 0x4f,
	0x5d, 0xce, 0x3d, 0xc6, 0xa9, 0x7e, 0x4a, 0xbf, 0xaf, 0x27, 0xe4, 0xc7, 0x7a, 0x42, 0x7e, 0xad,
	0x27, 0xe4, 0xeb, 0xef, 0xc9, 0xd6, 0xe5, 0x40, 0xb5, 0x7b, 0xf2, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x6e, 0xa3, 0xf1, 0xfb, 0x4f, 0x03, 0x00, 0x00,
}

func (m *RobustId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobustId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RobustId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Reply != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Reply))
		i--
		dAtA[i] = 0x11
	}
	if m.Id != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Id))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *RobustMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RobustMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RobustMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RemoteAddr) > 0 {
		i -= len(m.RemoteAddr)
		copy(dAtA[i:], m.RemoteAddr)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.RemoteAddr)))
		i--
		dAtA[i] = 0x52
	}
	if m.Revision != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Revision))
		i--
		dAtA[i] = 0x48
	}
	if m.ClientMessageId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ClientMessageId))
		i--
		dAtA[i] = 0x40
	}
	if len(m.CurrentMaster) > 0 {
		i -= len(m.CurrentMaster)
		copy(dAtA[i:], m.CurrentMaster)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CurrentMaster)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Servers) > 0 {
		for iNdEx := len(m.Servers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Servers[iNdEx])
			copy(dAtA[i:], m.Servers[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Servers[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.UnixNano != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.UnixNano))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Session != nil {
		{
			size, err := m.Session.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RaftLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extensions) > 0 {
		i -= len(m.Extensions)
		copy(dAtA[i:], m.Extensions)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Extensions)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Term != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Term))
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RobustId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 9
	}
	if m.Reply != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RobustMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Session != nil {
		l = m.Session.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.UnixNano != 0 {
		n += 1 + sovTypes(uint64(m.UnixNano))
	}
	if len(m.Servers) > 0 {
		for _, s := range m.Servers {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.CurrentMaster)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ClientMessageId != 0 {
		n += 1 + sovTypes(uint64(m.ClientMessageId))
	}
	if m.Revision != 0 {
		n += 1 + sovTypes(uint64(m.Revision))
	}
	l = len(m.RemoteAddr)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RaftLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovTypes(uint64(m.Index))
	}
	if m.Term != 0 {
		n += 1 + sovTypes(uint64(m.Term))
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Extensions)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RobustId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobustId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobustId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			m.Reply = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Reply = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RobustMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RobustMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RobustMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &RobustId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &RobustId{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RobustMessage_RobustType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnixNano", wireType)
			}
			m.UnixNano = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnixNano |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servers = append(m.Servers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentMaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentMaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientMessageId", wireType)
			}
			m.ClientMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientMessageId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revision", wireType)
			}
			m.Revision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Revision |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RaftLog_LogType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = append(m.Extensions[:0], dAtA[iNdEx:postIndex]...)
			if m.Extensions == nil {
				m.Extensions = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
